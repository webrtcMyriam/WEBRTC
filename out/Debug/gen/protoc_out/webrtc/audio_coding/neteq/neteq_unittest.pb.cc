// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: neteq_unittest.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "neteq_unittest.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace webrtc {
namespace neteq_unittest {

void protobuf_ShutdownFile_neteq_5funittest_2eproto() {
  delete NetEqNetworkStatistics::default_instance_;
  delete RtcpStatistics::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_neteq_5funittest_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_neteq_5funittest_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  NetEqNetworkStatistics::default_instance_ = new NetEqNetworkStatistics();
  RtcpStatistics::default_instance_ = new RtcpStatistics();
  NetEqNetworkStatistics::default_instance_->InitAsDefaultInstance();
  RtcpStatistics::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_neteq_5funittest_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_neteq_5funittest_2eproto_once_);
void protobuf_AddDesc_neteq_5funittest_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_neteq_5funittest_2eproto_once_,
                 &protobuf_AddDesc_neteq_5funittest_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_neteq_5funittest_2eproto {
  StaticDescriptorInitializer_neteq_5funittest_2eproto() {
    protobuf_AddDesc_neteq_5funittest_2eproto();
  }
} static_descriptor_initializer_neteq_5funittest_2eproto_;
#endif

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
GOOGLE_ATTRIBUTE_NOINLINE static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

static ::std::string* MutableUnknownFieldsForNetEqNetworkStatistics(
    NetEqNetworkStatistics* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetEqNetworkStatistics::kCurrentBufferSizeMsFieldNumber;
const int NetEqNetworkStatistics::kPreferredBufferSizeMsFieldNumber;
const int NetEqNetworkStatistics::kJitterPeaksFoundFieldNumber;
const int NetEqNetworkStatistics::kPacketLossRateFieldNumber;
const int NetEqNetworkStatistics::kPacketDiscardRateFieldNumber;
const int NetEqNetworkStatistics::kExpandRateFieldNumber;
const int NetEqNetworkStatistics::kSpeechExpandRateFieldNumber;
const int NetEqNetworkStatistics::kPreemptiveRateFieldNumber;
const int NetEqNetworkStatistics::kAccelerateRateFieldNumber;
const int NetEqNetworkStatistics::kSecondaryDecodedRateFieldNumber;
const int NetEqNetworkStatistics::kClockdriftPpmFieldNumber;
const int NetEqNetworkStatistics::kAddedZeroSamplesFieldNumber;
const int NetEqNetworkStatistics::kMeanWaitingTimeMsFieldNumber;
const int NetEqNetworkStatistics::kMedianWaitingTimeMsFieldNumber;
const int NetEqNetworkStatistics::kMinWaitingTimeMsFieldNumber;
const int NetEqNetworkStatistics::kMaxWaitingTimeMsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetEqNetworkStatistics::NetEqNetworkStatistics()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.neteq_unittest.NetEqNetworkStatistics)
}

void NetEqNetworkStatistics::InitAsDefaultInstance() {
}

NetEqNetworkStatistics::NetEqNetworkStatistics(const NetEqNetworkStatistics& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:webrtc.neteq_unittest.NetEqNetworkStatistics)
}

void NetEqNetworkStatistics::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  current_buffer_size_ms_ = 0u;
  preferred_buffer_size_ms_ = 0u;
  jitter_peaks_found_ = 0u;
  packet_loss_rate_ = 0u;
  packet_discard_rate_ = 0u;
  expand_rate_ = 0u;
  speech_expand_rate_ = 0u;
  preemptive_rate_ = 0u;
  accelerate_rate_ = 0u;
  secondary_decoded_rate_ = 0u;
  clockdrift_ppm_ = 0;
  added_zero_samples_ = GOOGLE_ULONGLONG(0);
  mean_waiting_time_ms_ = 0;
  median_waiting_time_ms_ = 0;
  min_waiting_time_ms_ = 0;
  max_waiting_time_ms_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetEqNetworkStatistics::~NetEqNetworkStatistics() {
  // @@protoc_insertion_point(destructor:webrtc.neteq_unittest.NetEqNetworkStatistics)
  SharedDtor();
}

void NetEqNetworkStatistics::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void NetEqNetworkStatistics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NetEqNetworkStatistics& NetEqNetworkStatistics::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_neteq_5funittest_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_neteq_5funittest_2eproto();
#endif
  return *default_instance_;
}

NetEqNetworkStatistics* NetEqNetworkStatistics::default_instance_ = NULL;

NetEqNetworkStatistics* NetEqNetworkStatistics::New(::google::protobuf::Arena* arena) const {
  NetEqNetworkStatistics* n = new NetEqNetworkStatistics;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetEqNetworkStatistics::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.neteq_unittest.NetEqNetworkStatistics)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(NetEqNetworkStatistics, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<NetEqNetworkStatistics*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(current_buffer_size_ms_, preemptive_rate_);
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(accelerate_rate_, max_waiting_time_ms_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool NetEqNetworkStatistics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForNetEqNetworkStatistics, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:webrtc.neteq_unittest.NetEqNetworkStatistics)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 current_buffer_size_ms = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &current_buffer_size_ms_)));
          set_has_current_buffer_size_ms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_preferred_buffer_size_ms;
        break;
      }

      // optional uint32 preferred_buffer_size_ms = 2;
      case 2: {
        if (tag == 16) {
         parse_preferred_buffer_size_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &preferred_buffer_size_ms_)));
          set_has_preferred_buffer_size_ms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_jitter_peaks_found;
        break;
      }

      // optional uint32 jitter_peaks_found = 3;
      case 3: {
        if (tag == 24) {
         parse_jitter_peaks_found:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &jitter_peaks_found_)));
          set_has_jitter_peaks_found();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_packet_loss_rate;
        break;
      }

      // optional uint32 packet_loss_rate = 4;
      case 4: {
        if (tag == 32) {
         parse_packet_loss_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &packet_loss_rate_)));
          set_has_packet_loss_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_packet_discard_rate;
        break;
      }

      // optional uint32 packet_discard_rate = 5;
      case 5: {
        if (tag == 40) {
         parse_packet_discard_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &packet_discard_rate_)));
          set_has_packet_discard_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_expand_rate;
        break;
      }

      // optional uint32 expand_rate = 6;
      case 6: {
        if (tag == 48) {
         parse_expand_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expand_rate_)));
          set_has_expand_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_speech_expand_rate;
        break;
      }

      // optional uint32 speech_expand_rate = 7;
      case 7: {
        if (tag == 56) {
         parse_speech_expand_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &speech_expand_rate_)));
          set_has_speech_expand_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_preemptive_rate;
        break;
      }

      // optional uint32 preemptive_rate = 8;
      case 8: {
        if (tag == 64) {
         parse_preemptive_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &preemptive_rate_)));
          set_has_preemptive_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_accelerate_rate;
        break;
      }

      // optional uint32 accelerate_rate = 9;
      case 9: {
        if (tag == 72) {
         parse_accelerate_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accelerate_rate_)));
          set_has_accelerate_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_secondary_decoded_rate;
        break;
      }

      // optional uint32 secondary_decoded_rate = 10;
      case 10: {
        if (tag == 80) {
         parse_secondary_decoded_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &secondary_decoded_rate_)));
          set_has_secondary_decoded_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_clockdrift_ppm;
        break;
      }

      // optional int32 clockdrift_ppm = 11;
      case 11: {
        if (tag == 88) {
         parse_clockdrift_ppm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clockdrift_ppm_)));
          set_has_clockdrift_ppm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_added_zero_samples;
        break;
      }

      // optional uint64 added_zero_samples = 12;
      case 12: {
        if (tag == 96) {
         parse_added_zero_samples:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &added_zero_samples_)));
          set_has_added_zero_samples();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_mean_waiting_time_ms;
        break;
      }

      // optional int32 mean_waiting_time_ms = 13;
      case 13: {
        if (tag == 104) {
         parse_mean_waiting_time_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mean_waiting_time_ms_)));
          set_has_mean_waiting_time_ms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_median_waiting_time_ms;
        break;
      }

      // optional int32 median_waiting_time_ms = 14;
      case 14: {
        if (tag == 112) {
         parse_median_waiting_time_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &median_waiting_time_ms_)));
          set_has_median_waiting_time_ms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_min_waiting_time_ms;
        break;
      }

      // optional int32 min_waiting_time_ms = 15;
      case 15: {
        if (tag == 120) {
         parse_min_waiting_time_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_waiting_time_ms_)));
          set_has_min_waiting_time_ms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_max_waiting_time_ms;
        break;
      }

      // optional int32 max_waiting_time_ms = 16;
      case 16: {
        if (tag == 128) {
         parse_max_waiting_time_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_waiting_time_ms_)));
          set_has_max_waiting_time_ms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.neteq_unittest.NetEqNetworkStatistics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.neteq_unittest.NetEqNetworkStatistics)
  return false;
#undef DO_
}

void NetEqNetworkStatistics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.neteq_unittest.NetEqNetworkStatistics)
  // optional uint32 current_buffer_size_ms = 1;
  if (has_current_buffer_size_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->current_buffer_size_ms(), output);
  }

  // optional uint32 preferred_buffer_size_ms = 2;
  if (has_preferred_buffer_size_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->preferred_buffer_size_ms(), output);
  }

  // optional uint32 jitter_peaks_found = 3;
  if (has_jitter_peaks_found()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->jitter_peaks_found(), output);
  }

  // optional uint32 packet_loss_rate = 4;
  if (has_packet_loss_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->packet_loss_rate(), output);
  }

  // optional uint32 packet_discard_rate = 5;
  if (has_packet_discard_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->packet_discard_rate(), output);
  }

  // optional uint32 expand_rate = 6;
  if (has_expand_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->expand_rate(), output);
  }

  // optional uint32 speech_expand_rate = 7;
  if (has_speech_expand_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->speech_expand_rate(), output);
  }

  // optional uint32 preemptive_rate = 8;
  if (has_preemptive_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->preemptive_rate(), output);
  }

  // optional uint32 accelerate_rate = 9;
  if (has_accelerate_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->accelerate_rate(), output);
  }

  // optional uint32 secondary_decoded_rate = 10;
  if (has_secondary_decoded_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->secondary_decoded_rate(), output);
  }

  // optional int32 clockdrift_ppm = 11;
  if (has_clockdrift_ppm()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->clockdrift_ppm(), output);
  }

  // optional uint64 added_zero_samples = 12;
  if (has_added_zero_samples()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->added_zero_samples(), output);
  }

  // optional int32 mean_waiting_time_ms = 13;
  if (has_mean_waiting_time_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->mean_waiting_time_ms(), output);
  }

  // optional int32 median_waiting_time_ms = 14;
  if (has_median_waiting_time_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->median_waiting_time_ms(), output);
  }

  // optional int32 min_waiting_time_ms = 15;
  if (has_min_waiting_time_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->min_waiting_time_ms(), output);
  }

  // optional int32 max_waiting_time_ms = 16;
  if (has_max_waiting_time_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->max_waiting_time_ms(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.neteq_unittest.NetEqNetworkStatistics)
}

int NetEqNetworkStatistics::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.neteq_unittest.NetEqNetworkStatistics)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 current_buffer_size_ms = 1;
    if (has_current_buffer_size_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->current_buffer_size_ms());
    }

    // optional uint32 preferred_buffer_size_ms = 2;
    if (has_preferred_buffer_size_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->preferred_buffer_size_ms());
    }

    // optional uint32 jitter_peaks_found = 3;
    if (has_jitter_peaks_found()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->jitter_peaks_found());
    }

    // optional uint32 packet_loss_rate = 4;
    if (has_packet_loss_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->packet_loss_rate());
    }

    // optional uint32 packet_discard_rate = 5;
    if (has_packet_discard_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->packet_discard_rate());
    }

    // optional uint32 expand_rate = 6;
    if (has_expand_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expand_rate());
    }

    // optional uint32 speech_expand_rate = 7;
    if (has_speech_expand_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->speech_expand_rate());
    }

    // optional uint32 preemptive_rate = 8;
    if (has_preemptive_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->preemptive_rate());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint32 accelerate_rate = 9;
    if (has_accelerate_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accelerate_rate());
    }

    // optional uint32 secondary_decoded_rate = 10;
    if (has_secondary_decoded_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->secondary_decoded_rate());
    }

    // optional int32 clockdrift_ppm = 11;
    if (has_clockdrift_ppm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clockdrift_ppm());
    }

    // optional uint64 added_zero_samples = 12;
    if (has_added_zero_samples()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->added_zero_samples());
    }

    // optional int32 mean_waiting_time_ms = 13;
    if (has_mean_waiting_time_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mean_waiting_time_ms());
    }

    // optional int32 median_waiting_time_ms = 14;
    if (has_median_waiting_time_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->median_waiting_time_ms());
    }

    // optional int32 min_waiting_time_ms = 15;
    if (has_min_waiting_time_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_waiting_time_ms());
    }

    // optional int32 max_waiting_time_ms = 16;
    if (has_max_waiting_time_ms()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_waiting_time_ms());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetEqNetworkStatistics::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NetEqNetworkStatistics*>(&from));
}

void NetEqNetworkStatistics::MergeFrom(const NetEqNetworkStatistics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.neteq_unittest.NetEqNetworkStatistics)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_current_buffer_size_ms()) {
      set_current_buffer_size_ms(from.current_buffer_size_ms());
    }
    if (from.has_preferred_buffer_size_ms()) {
      set_preferred_buffer_size_ms(from.preferred_buffer_size_ms());
    }
    if (from.has_jitter_peaks_found()) {
      set_jitter_peaks_found(from.jitter_peaks_found());
    }
    if (from.has_packet_loss_rate()) {
      set_packet_loss_rate(from.packet_loss_rate());
    }
    if (from.has_packet_discard_rate()) {
      set_packet_discard_rate(from.packet_discard_rate());
    }
    if (from.has_expand_rate()) {
      set_expand_rate(from.expand_rate());
    }
    if (from.has_speech_expand_rate()) {
      set_speech_expand_rate(from.speech_expand_rate());
    }
    if (from.has_preemptive_rate()) {
      set_preemptive_rate(from.preemptive_rate());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_accelerate_rate()) {
      set_accelerate_rate(from.accelerate_rate());
    }
    if (from.has_secondary_decoded_rate()) {
      set_secondary_decoded_rate(from.secondary_decoded_rate());
    }
    if (from.has_clockdrift_ppm()) {
      set_clockdrift_ppm(from.clockdrift_ppm());
    }
    if (from.has_added_zero_samples()) {
      set_added_zero_samples(from.added_zero_samples());
    }
    if (from.has_mean_waiting_time_ms()) {
      set_mean_waiting_time_ms(from.mean_waiting_time_ms());
    }
    if (from.has_median_waiting_time_ms()) {
      set_median_waiting_time_ms(from.median_waiting_time_ms());
    }
    if (from.has_min_waiting_time_ms()) {
      set_min_waiting_time_ms(from.min_waiting_time_ms());
    }
    if (from.has_max_waiting_time_ms()) {
      set_max_waiting_time_ms(from.max_waiting_time_ms());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void NetEqNetworkStatistics::CopyFrom(const NetEqNetworkStatistics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.neteq_unittest.NetEqNetworkStatistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetEqNetworkStatistics::IsInitialized() const {

  return true;
}

void NetEqNetworkStatistics::Swap(NetEqNetworkStatistics* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetEqNetworkStatistics::InternalSwap(NetEqNetworkStatistics* other) {
  std::swap(current_buffer_size_ms_, other->current_buffer_size_ms_);
  std::swap(preferred_buffer_size_ms_, other->preferred_buffer_size_ms_);
  std::swap(jitter_peaks_found_, other->jitter_peaks_found_);
  std::swap(packet_loss_rate_, other->packet_loss_rate_);
  std::swap(packet_discard_rate_, other->packet_discard_rate_);
  std::swap(expand_rate_, other->expand_rate_);
  std::swap(speech_expand_rate_, other->speech_expand_rate_);
  std::swap(preemptive_rate_, other->preemptive_rate_);
  std::swap(accelerate_rate_, other->accelerate_rate_);
  std::swap(secondary_decoded_rate_, other->secondary_decoded_rate_);
  std::swap(clockdrift_ppm_, other->clockdrift_ppm_);
  std::swap(added_zero_samples_, other->added_zero_samples_);
  std::swap(mean_waiting_time_ms_, other->mean_waiting_time_ms_);
  std::swap(median_waiting_time_ms_, other->median_waiting_time_ms_);
  std::swap(min_waiting_time_ms_, other->min_waiting_time_ms_);
  std::swap(max_waiting_time_ms_, other->max_waiting_time_ms_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string NetEqNetworkStatistics::GetTypeName() const {
  return "webrtc.neteq_unittest.NetEqNetworkStatistics";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NetEqNetworkStatistics

// optional uint32 current_buffer_size_ms = 1;
bool NetEqNetworkStatistics::has_current_buffer_size_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NetEqNetworkStatistics::set_has_current_buffer_size_ms() {
  _has_bits_[0] |= 0x00000001u;
}
void NetEqNetworkStatistics::clear_has_current_buffer_size_ms() {
  _has_bits_[0] &= ~0x00000001u;
}
void NetEqNetworkStatistics::clear_current_buffer_size_ms() {
  current_buffer_size_ms_ = 0u;
  clear_has_current_buffer_size_ms();
}
 ::google::protobuf::uint32 NetEqNetworkStatistics::current_buffer_size_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.neteq_unittest.NetEqNetworkStatistics.current_buffer_size_ms)
  return current_buffer_size_ms_;
}
 void NetEqNetworkStatistics::set_current_buffer_size_ms(::google::protobuf::uint32 value) {
  set_has_current_buffer_size_ms();
  current_buffer_size_ms_ = value;
  // @@protoc_insertion_point(field_set:webrtc.neteq_unittest.NetEqNetworkStatistics.current_buffer_size_ms)
}

// optional uint32 preferred_buffer_size_ms = 2;
bool NetEqNetworkStatistics::has_preferred_buffer_size_ms() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NetEqNetworkStatistics::set_has_preferred_buffer_size_ms() {
  _has_bits_[0] |= 0x00000002u;
}
void NetEqNetworkStatistics::clear_has_preferred_buffer_size_ms() {
  _has_bits_[0] &= ~0x00000002u;
}
void NetEqNetworkStatistics::clear_preferred_buffer_size_ms() {
  preferred_buffer_size_ms_ = 0u;
  clear_has_preferred_buffer_size_ms();
}
 ::google::protobuf::uint32 NetEqNetworkStatistics::preferred_buffer_size_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.neteq_unittest.NetEqNetworkStatistics.preferred_buffer_size_ms)
  return preferred_buffer_size_ms_;
}
 void NetEqNetworkStatistics::set_preferred_buffer_size_ms(::google::protobuf::uint32 value) {
  set_has_preferred_buffer_size_ms();
  preferred_buffer_size_ms_ = value;
  // @@protoc_insertion_point(field_set:webrtc.neteq_unittest.NetEqNetworkStatistics.preferred_buffer_size_ms)
}

// optional uint32 jitter_peaks_found = 3;
bool NetEqNetworkStatistics::has_jitter_peaks_found() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void NetEqNetworkStatistics::set_has_jitter_peaks_found() {
  _has_bits_[0] |= 0x00000004u;
}
void NetEqNetworkStatistics::clear_has_jitter_peaks_found() {
  _has_bits_[0] &= ~0x00000004u;
}
void NetEqNetworkStatistics::clear_jitter_peaks_found() {
  jitter_peaks_found_ = 0u;
  clear_has_jitter_peaks_found();
}
 ::google::protobuf::uint32 NetEqNetworkStatistics::jitter_peaks_found() const {
  // @@protoc_insertion_point(field_get:webrtc.neteq_unittest.NetEqNetworkStatistics.jitter_peaks_found)
  return jitter_peaks_found_;
}
 void NetEqNetworkStatistics::set_jitter_peaks_found(::google::protobuf::uint32 value) {
  set_has_jitter_peaks_found();
  jitter_peaks_found_ = value;
  // @@protoc_insertion_point(field_set:webrtc.neteq_unittest.NetEqNetworkStatistics.jitter_peaks_found)
}

// optional uint32 packet_loss_rate = 4;
bool NetEqNetworkStatistics::has_packet_loss_rate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void NetEqNetworkStatistics::set_has_packet_loss_rate() {
  _has_bits_[0] |= 0x00000008u;
}
void NetEqNetworkStatistics::clear_has_packet_loss_rate() {
  _has_bits_[0] &= ~0x00000008u;
}
void NetEqNetworkStatistics::clear_packet_loss_rate() {
  packet_loss_rate_ = 0u;
  clear_has_packet_loss_rate();
}
 ::google::protobuf::uint32 NetEqNetworkStatistics::packet_loss_rate() const {
  // @@protoc_insertion_point(field_get:webrtc.neteq_unittest.NetEqNetworkStatistics.packet_loss_rate)
  return packet_loss_rate_;
}
 void NetEqNetworkStatistics::set_packet_loss_rate(::google::protobuf::uint32 value) {
  set_has_packet_loss_rate();
  packet_loss_rate_ = value;
  // @@protoc_insertion_point(field_set:webrtc.neteq_unittest.NetEqNetworkStatistics.packet_loss_rate)
}

// optional uint32 packet_discard_rate = 5;
bool NetEqNetworkStatistics::has_packet_discard_rate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void NetEqNetworkStatistics::set_has_packet_discard_rate() {
  _has_bits_[0] |= 0x00000010u;
}
void NetEqNetworkStatistics::clear_has_packet_discard_rate() {
  _has_bits_[0] &= ~0x00000010u;
}
void NetEqNetworkStatistics::clear_packet_discard_rate() {
  packet_discard_rate_ = 0u;
  clear_has_packet_discard_rate();
}
 ::google::protobuf::uint32 NetEqNetworkStatistics::packet_discard_rate() const {
  // @@protoc_insertion_point(field_get:webrtc.neteq_unittest.NetEqNetworkStatistics.packet_discard_rate)
  return packet_discard_rate_;
}
 void NetEqNetworkStatistics::set_packet_discard_rate(::google::protobuf::uint32 value) {
  set_has_packet_discard_rate();
  packet_discard_rate_ = value;
  // @@protoc_insertion_point(field_set:webrtc.neteq_unittest.NetEqNetworkStatistics.packet_discard_rate)
}

// optional uint32 expand_rate = 6;
bool NetEqNetworkStatistics::has_expand_rate() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void NetEqNetworkStatistics::set_has_expand_rate() {
  _has_bits_[0] |= 0x00000020u;
}
void NetEqNetworkStatistics::clear_has_expand_rate() {
  _has_bits_[0] &= ~0x00000020u;
}
void NetEqNetworkStatistics::clear_expand_rate() {
  expand_rate_ = 0u;
  clear_has_expand_rate();
}
 ::google::protobuf::uint32 NetEqNetworkStatistics::expand_rate() const {
  // @@protoc_insertion_point(field_get:webrtc.neteq_unittest.NetEqNetworkStatistics.expand_rate)
  return expand_rate_;
}
 void NetEqNetworkStatistics::set_expand_rate(::google::protobuf::uint32 value) {
  set_has_expand_rate();
  expand_rate_ = value;
  // @@protoc_insertion_point(field_set:webrtc.neteq_unittest.NetEqNetworkStatistics.expand_rate)
}

// optional uint32 speech_expand_rate = 7;
bool NetEqNetworkStatistics::has_speech_expand_rate() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void NetEqNetworkStatistics::set_has_speech_expand_rate() {
  _has_bits_[0] |= 0x00000040u;
}
void NetEqNetworkStatistics::clear_has_speech_expand_rate() {
  _has_bits_[0] &= ~0x00000040u;
}
void NetEqNetworkStatistics::clear_speech_expand_rate() {
  speech_expand_rate_ = 0u;
  clear_has_speech_expand_rate();
}
 ::google::protobuf::uint32 NetEqNetworkStatistics::speech_expand_rate() const {
  // @@protoc_insertion_point(field_get:webrtc.neteq_unittest.NetEqNetworkStatistics.speech_expand_rate)
  return speech_expand_rate_;
}
 void NetEqNetworkStatistics::set_speech_expand_rate(::google::protobuf::uint32 value) {
  set_has_speech_expand_rate();
  speech_expand_rate_ = value;
  // @@protoc_insertion_point(field_set:webrtc.neteq_unittest.NetEqNetworkStatistics.speech_expand_rate)
}

// optional uint32 preemptive_rate = 8;
bool NetEqNetworkStatistics::has_preemptive_rate() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void NetEqNetworkStatistics::set_has_preemptive_rate() {
  _has_bits_[0] |= 0x00000080u;
}
void NetEqNetworkStatistics::clear_has_preemptive_rate() {
  _has_bits_[0] &= ~0x00000080u;
}
void NetEqNetworkStatistics::clear_preemptive_rate() {
  preemptive_rate_ = 0u;
  clear_has_preemptive_rate();
}
 ::google::protobuf::uint32 NetEqNetworkStatistics::preemptive_rate() const {
  // @@protoc_insertion_point(field_get:webrtc.neteq_unittest.NetEqNetworkStatistics.preemptive_rate)
  return preemptive_rate_;
}
 void NetEqNetworkStatistics::set_preemptive_rate(::google::protobuf::uint32 value) {
  set_has_preemptive_rate();
  preemptive_rate_ = value;
  // @@protoc_insertion_point(field_set:webrtc.neteq_unittest.NetEqNetworkStatistics.preemptive_rate)
}

// optional uint32 accelerate_rate = 9;
bool NetEqNetworkStatistics::has_accelerate_rate() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void NetEqNetworkStatistics::set_has_accelerate_rate() {
  _has_bits_[0] |= 0x00000100u;
}
void NetEqNetworkStatistics::clear_has_accelerate_rate() {
  _has_bits_[0] &= ~0x00000100u;
}
void NetEqNetworkStatistics::clear_accelerate_rate() {
  accelerate_rate_ = 0u;
  clear_has_accelerate_rate();
}
 ::google::protobuf::uint32 NetEqNetworkStatistics::accelerate_rate() const {
  // @@protoc_insertion_point(field_get:webrtc.neteq_unittest.NetEqNetworkStatistics.accelerate_rate)
  return accelerate_rate_;
}
 void NetEqNetworkStatistics::set_accelerate_rate(::google::protobuf::uint32 value) {
  set_has_accelerate_rate();
  accelerate_rate_ = value;
  // @@protoc_insertion_point(field_set:webrtc.neteq_unittest.NetEqNetworkStatistics.accelerate_rate)
}

// optional uint32 secondary_decoded_rate = 10;
bool NetEqNetworkStatistics::has_secondary_decoded_rate() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void NetEqNetworkStatistics::set_has_secondary_decoded_rate() {
  _has_bits_[0] |= 0x00000200u;
}
void NetEqNetworkStatistics::clear_has_secondary_decoded_rate() {
  _has_bits_[0] &= ~0x00000200u;
}
void NetEqNetworkStatistics::clear_secondary_decoded_rate() {
  secondary_decoded_rate_ = 0u;
  clear_has_secondary_decoded_rate();
}
 ::google::protobuf::uint32 NetEqNetworkStatistics::secondary_decoded_rate() const {
  // @@protoc_insertion_point(field_get:webrtc.neteq_unittest.NetEqNetworkStatistics.secondary_decoded_rate)
  return secondary_decoded_rate_;
}
 void NetEqNetworkStatistics::set_secondary_decoded_rate(::google::protobuf::uint32 value) {
  set_has_secondary_decoded_rate();
  secondary_decoded_rate_ = value;
  // @@protoc_insertion_point(field_set:webrtc.neteq_unittest.NetEqNetworkStatistics.secondary_decoded_rate)
}

// optional int32 clockdrift_ppm = 11;
bool NetEqNetworkStatistics::has_clockdrift_ppm() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void NetEqNetworkStatistics::set_has_clockdrift_ppm() {
  _has_bits_[0] |= 0x00000400u;
}
void NetEqNetworkStatistics::clear_has_clockdrift_ppm() {
  _has_bits_[0] &= ~0x00000400u;
}
void NetEqNetworkStatistics::clear_clockdrift_ppm() {
  clockdrift_ppm_ = 0;
  clear_has_clockdrift_ppm();
}
 ::google::protobuf::int32 NetEqNetworkStatistics::clockdrift_ppm() const {
  // @@protoc_insertion_point(field_get:webrtc.neteq_unittest.NetEqNetworkStatistics.clockdrift_ppm)
  return clockdrift_ppm_;
}
 void NetEqNetworkStatistics::set_clockdrift_ppm(::google::protobuf::int32 value) {
  set_has_clockdrift_ppm();
  clockdrift_ppm_ = value;
  // @@protoc_insertion_point(field_set:webrtc.neteq_unittest.NetEqNetworkStatistics.clockdrift_ppm)
}

// optional uint64 added_zero_samples = 12;
bool NetEqNetworkStatistics::has_added_zero_samples() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void NetEqNetworkStatistics::set_has_added_zero_samples() {
  _has_bits_[0] |= 0x00000800u;
}
void NetEqNetworkStatistics::clear_has_added_zero_samples() {
  _has_bits_[0] &= ~0x00000800u;
}
void NetEqNetworkStatistics::clear_added_zero_samples() {
  added_zero_samples_ = GOOGLE_ULONGLONG(0);
  clear_has_added_zero_samples();
}
 ::google::protobuf::uint64 NetEqNetworkStatistics::added_zero_samples() const {
  // @@protoc_insertion_point(field_get:webrtc.neteq_unittest.NetEqNetworkStatistics.added_zero_samples)
  return added_zero_samples_;
}
 void NetEqNetworkStatistics::set_added_zero_samples(::google::protobuf::uint64 value) {
  set_has_added_zero_samples();
  added_zero_samples_ = value;
  // @@protoc_insertion_point(field_set:webrtc.neteq_unittest.NetEqNetworkStatistics.added_zero_samples)
}

// optional int32 mean_waiting_time_ms = 13;
bool NetEqNetworkStatistics::has_mean_waiting_time_ms() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void NetEqNetworkStatistics::set_has_mean_waiting_time_ms() {
  _has_bits_[0] |= 0x00001000u;
}
void NetEqNetworkStatistics::clear_has_mean_waiting_time_ms() {
  _has_bits_[0] &= ~0x00001000u;
}
void NetEqNetworkStatistics::clear_mean_waiting_time_ms() {
  mean_waiting_time_ms_ = 0;
  clear_has_mean_waiting_time_ms();
}
 ::google::protobuf::int32 NetEqNetworkStatistics::mean_waiting_time_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.neteq_unittest.NetEqNetworkStatistics.mean_waiting_time_ms)
  return mean_waiting_time_ms_;
}
 void NetEqNetworkStatistics::set_mean_waiting_time_ms(::google::protobuf::int32 value) {
  set_has_mean_waiting_time_ms();
  mean_waiting_time_ms_ = value;
  // @@protoc_insertion_point(field_set:webrtc.neteq_unittest.NetEqNetworkStatistics.mean_waiting_time_ms)
}

// optional int32 median_waiting_time_ms = 14;
bool NetEqNetworkStatistics::has_median_waiting_time_ms() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void NetEqNetworkStatistics::set_has_median_waiting_time_ms() {
  _has_bits_[0] |= 0x00002000u;
}
void NetEqNetworkStatistics::clear_has_median_waiting_time_ms() {
  _has_bits_[0] &= ~0x00002000u;
}
void NetEqNetworkStatistics::clear_median_waiting_time_ms() {
  median_waiting_time_ms_ = 0;
  clear_has_median_waiting_time_ms();
}
 ::google::protobuf::int32 NetEqNetworkStatistics::median_waiting_time_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.neteq_unittest.NetEqNetworkStatistics.median_waiting_time_ms)
  return median_waiting_time_ms_;
}
 void NetEqNetworkStatistics::set_median_waiting_time_ms(::google::protobuf::int32 value) {
  set_has_median_waiting_time_ms();
  median_waiting_time_ms_ = value;
  // @@protoc_insertion_point(field_set:webrtc.neteq_unittest.NetEqNetworkStatistics.median_waiting_time_ms)
}

// optional int32 min_waiting_time_ms = 15;
bool NetEqNetworkStatistics::has_min_waiting_time_ms() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void NetEqNetworkStatistics::set_has_min_waiting_time_ms() {
  _has_bits_[0] |= 0x00004000u;
}
void NetEqNetworkStatistics::clear_has_min_waiting_time_ms() {
  _has_bits_[0] &= ~0x00004000u;
}
void NetEqNetworkStatistics::clear_min_waiting_time_ms() {
  min_waiting_time_ms_ = 0;
  clear_has_min_waiting_time_ms();
}
 ::google::protobuf::int32 NetEqNetworkStatistics::min_waiting_time_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.neteq_unittest.NetEqNetworkStatistics.min_waiting_time_ms)
  return min_waiting_time_ms_;
}
 void NetEqNetworkStatistics::set_min_waiting_time_ms(::google::protobuf::int32 value) {
  set_has_min_waiting_time_ms();
  min_waiting_time_ms_ = value;
  // @@protoc_insertion_point(field_set:webrtc.neteq_unittest.NetEqNetworkStatistics.min_waiting_time_ms)
}

// optional int32 max_waiting_time_ms = 16;
bool NetEqNetworkStatistics::has_max_waiting_time_ms() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void NetEqNetworkStatistics::set_has_max_waiting_time_ms() {
  _has_bits_[0] |= 0x00008000u;
}
void NetEqNetworkStatistics::clear_has_max_waiting_time_ms() {
  _has_bits_[0] &= ~0x00008000u;
}
void NetEqNetworkStatistics::clear_max_waiting_time_ms() {
  max_waiting_time_ms_ = 0;
  clear_has_max_waiting_time_ms();
}
 ::google::protobuf::int32 NetEqNetworkStatistics::max_waiting_time_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.neteq_unittest.NetEqNetworkStatistics.max_waiting_time_ms)
  return max_waiting_time_ms_;
}
 void NetEqNetworkStatistics::set_max_waiting_time_ms(::google::protobuf::int32 value) {
  set_has_max_waiting_time_ms();
  max_waiting_time_ms_ = value;
  // @@protoc_insertion_point(field_set:webrtc.neteq_unittest.NetEqNetworkStatistics.max_waiting_time_ms)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForRtcpStatistics(
    RtcpStatistics* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RtcpStatistics::kFractionLostFieldNumber;
const int RtcpStatistics::kCumulativeLostFieldNumber;
const int RtcpStatistics::kExtendedMaxSequenceNumberFieldNumber;
const int RtcpStatistics::kJitterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RtcpStatistics::RtcpStatistics()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.neteq_unittest.RtcpStatistics)
}

void RtcpStatistics::InitAsDefaultInstance() {
}

RtcpStatistics::RtcpStatistics(const RtcpStatistics& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:webrtc.neteq_unittest.RtcpStatistics)
}

void RtcpStatistics::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fraction_lost_ = 0u;
  cumulative_lost_ = 0u;
  extended_max_sequence_number_ = 0u;
  jitter_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RtcpStatistics::~RtcpStatistics() {
  // @@protoc_insertion_point(destructor:webrtc.neteq_unittest.RtcpStatistics)
  SharedDtor();
}

void RtcpStatistics::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RtcpStatistics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RtcpStatistics& RtcpStatistics::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_neteq_5funittest_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_neteq_5funittest_2eproto();
#endif
  return *default_instance_;
}

RtcpStatistics* RtcpStatistics::default_instance_ = NULL;

RtcpStatistics* RtcpStatistics::New(::google::protobuf::Arena* arena) const {
  RtcpStatistics* n = new RtcpStatistics;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RtcpStatistics::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.neteq_unittest.RtcpStatistics)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RtcpStatistics, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RtcpStatistics*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(fraction_lost_, jitter_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RtcpStatistics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForRtcpStatistics, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:webrtc.neteq_unittest.RtcpStatistics)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fraction_lost = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fraction_lost_)));
          set_has_fraction_lost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cumulative_lost;
        break;
      }

      // optional uint32 cumulative_lost = 2;
      case 2: {
        if (tag == 16) {
         parse_cumulative_lost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cumulative_lost_)));
          set_has_cumulative_lost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_extended_max_sequence_number;
        break;
      }

      // optional uint32 extended_max_sequence_number = 3;
      case 3: {
        if (tag == 24) {
         parse_extended_max_sequence_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &extended_max_sequence_number_)));
          set_has_extended_max_sequence_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_jitter;
        break;
      }

      // optional uint32 jitter = 4;
      case 4: {
        if (tag == 32) {
         parse_jitter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &jitter_)));
          set_has_jitter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.neteq_unittest.RtcpStatistics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.neteq_unittest.RtcpStatistics)
  return false;
#undef DO_
}

void RtcpStatistics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.neteq_unittest.RtcpStatistics)
  // optional uint32 fraction_lost = 1;
  if (has_fraction_lost()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fraction_lost(), output);
  }

  // optional uint32 cumulative_lost = 2;
  if (has_cumulative_lost()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cumulative_lost(), output);
  }

  // optional uint32 extended_max_sequence_number = 3;
  if (has_extended_max_sequence_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->extended_max_sequence_number(), output);
  }

  // optional uint32 jitter = 4;
  if (has_jitter()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->jitter(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.neteq_unittest.RtcpStatistics)
}

int RtcpStatistics::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.neteq_unittest.RtcpStatistics)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 fraction_lost = 1;
    if (has_fraction_lost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fraction_lost());
    }

    // optional uint32 cumulative_lost = 2;
    if (has_cumulative_lost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cumulative_lost());
    }

    // optional uint32 extended_max_sequence_number = 3;
    if (has_extended_max_sequence_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->extended_max_sequence_number());
    }

    // optional uint32 jitter = 4;
    if (has_jitter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->jitter());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RtcpStatistics::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RtcpStatistics*>(&from));
}

void RtcpStatistics::MergeFrom(const RtcpStatistics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.neteq_unittest.RtcpStatistics)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fraction_lost()) {
      set_fraction_lost(from.fraction_lost());
    }
    if (from.has_cumulative_lost()) {
      set_cumulative_lost(from.cumulative_lost());
    }
    if (from.has_extended_max_sequence_number()) {
      set_extended_max_sequence_number(from.extended_max_sequence_number());
    }
    if (from.has_jitter()) {
      set_jitter(from.jitter());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void RtcpStatistics::CopyFrom(const RtcpStatistics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.neteq_unittest.RtcpStatistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtcpStatistics::IsInitialized() const {

  return true;
}

void RtcpStatistics::Swap(RtcpStatistics* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RtcpStatistics::InternalSwap(RtcpStatistics* other) {
  std::swap(fraction_lost_, other->fraction_lost_);
  std::swap(cumulative_lost_, other->cumulative_lost_);
  std::swap(extended_max_sequence_number_, other->extended_max_sequence_number_);
  std::swap(jitter_, other->jitter_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string RtcpStatistics::GetTypeName() const {
  return "webrtc.neteq_unittest.RtcpStatistics";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RtcpStatistics

// optional uint32 fraction_lost = 1;
bool RtcpStatistics::has_fraction_lost() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RtcpStatistics::set_has_fraction_lost() {
  _has_bits_[0] |= 0x00000001u;
}
void RtcpStatistics::clear_has_fraction_lost() {
  _has_bits_[0] &= ~0x00000001u;
}
void RtcpStatistics::clear_fraction_lost() {
  fraction_lost_ = 0u;
  clear_has_fraction_lost();
}
 ::google::protobuf::uint32 RtcpStatistics::fraction_lost() const {
  // @@protoc_insertion_point(field_get:webrtc.neteq_unittest.RtcpStatistics.fraction_lost)
  return fraction_lost_;
}
 void RtcpStatistics::set_fraction_lost(::google::protobuf::uint32 value) {
  set_has_fraction_lost();
  fraction_lost_ = value;
  // @@protoc_insertion_point(field_set:webrtc.neteq_unittest.RtcpStatistics.fraction_lost)
}

// optional uint32 cumulative_lost = 2;
bool RtcpStatistics::has_cumulative_lost() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RtcpStatistics::set_has_cumulative_lost() {
  _has_bits_[0] |= 0x00000002u;
}
void RtcpStatistics::clear_has_cumulative_lost() {
  _has_bits_[0] &= ~0x00000002u;
}
void RtcpStatistics::clear_cumulative_lost() {
  cumulative_lost_ = 0u;
  clear_has_cumulative_lost();
}
 ::google::protobuf::uint32 RtcpStatistics::cumulative_lost() const {
  // @@protoc_insertion_point(field_get:webrtc.neteq_unittest.RtcpStatistics.cumulative_lost)
  return cumulative_lost_;
}
 void RtcpStatistics::set_cumulative_lost(::google::protobuf::uint32 value) {
  set_has_cumulative_lost();
  cumulative_lost_ = value;
  // @@protoc_insertion_point(field_set:webrtc.neteq_unittest.RtcpStatistics.cumulative_lost)
}

// optional uint32 extended_max_sequence_number = 3;
bool RtcpStatistics::has_extended_max_sequence_number() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RtcpStatistics::set_has_extended_max_sequence_number() {
  _has_bits_[0] |= 0x00000004u;
}
void RtcpStatistics::clear_has_extended_max_sequence_number() {
  _has_bits_[0] &= ~0x00000004u;
}
void RtcpStatistics::clear_extended_max_sequence_number() {
  extended_max_sequence_number_ = 0u;
  clear_has_extended_max_sequence_number();
}
 ::google::protobuf::uint32 RtcpStatistics::extended_max_sequence_number() const {
  // @@protoc_insertion_point(field_get:webrtc.neteq_unittest.RtcpStatistics.extended_max_sequence_number)
  return extended_max_sequence_number_;
}
 void RtcpStatistics::set_extended_max_sequence_number(::google::protobuf::uint32 value) {
  set_has_extended_max_sequence_number();
  extended_max_sequence_number_ = value;
  // @@protoc_insertion_point(field_set:webrtc.neteq_unittest.RtcpStatistics.extended_max_sequence_number)
}

// optional uint32 jitter = 4;
bool RtcpStatistics::has_jitter() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RtcpStatistics::set_has_jitter() {
  _has_bits_[0] |= 0x00000008u;
}
void RtcpStatistics::clear_has_jitter() {
  _has_bits_[0] &= ~0x00000008u;
}
void RtcpStatistics::clear_jitter() {
  jitter_ = 0u;
  clear_has_jitter();
}
 ::google::protobuf::uint32 RtcpStatistics::jitter() const {
  // @@protoc_insertion_point(field_get:webrtc.neteq_unittest.RtcpStatistics.jitter)
  return jitter_;
}
 void RtcpStatistics::set_jitter(::google::protobuf::uint32 value) {
  set_has_jitter();
  jitter_ = value;
  // @@protoc_insertion_point(field_set:webrtc.neteq_unittest.RtcpStatistics.jitter)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace neteq_unittest
}  // namespace webrtc

// @@protoc_insertion_point(global_scope)
